[language-server]
biome = { command = "biome", args = ["lsp-proxy"] }

[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.vscode-eslint-language-server.config.workingDirectory]
mode = "auto"

[[language]]
name = "html"
auto-format = true
formatter = { command = 'prettier', args = ["--parser", "html"] }
language-servers = [
  "vscode-html-language-server",
  "tailwindcss-ls",
  "emmet-lsp",
]

[[language]]
name = "json"
formatter = { command = 'biome', args = [
  "format",
  "--write",
  "--stdin-file-path",
  "file.json",
] }

[[language]]
name = "css"
formatter = { command = 'biome', args = [
  "format",
  "--write",
  "--stdin-file-path",
  "file.css"
] }
language-servers = ["vscode-css-language-server", "tailwindcss-ls"]

[[language]]
name = "javascript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.js",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  # "vscode-eslint-language-server",
  "biome",
]

[[language]]
name = "typescript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.ts",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  # "vscode-eslint-language-server",
  "biome",

]

[[language]]
name = "jsx"
# formatter = { command = 'prettier', args = ["--stdin-filepath", "file.jsx"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.jsx",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  "tailwindcss-ls",
  "emmet-lsp",
  # "vscode-eslint-language-server",
  "biome",
]

[[language]]
name = "tsx"
# formatter = { command = 'prettier', args = ["--stdin-filepath", "file.tsx"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.tsx",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  "tailwindcss-ls",
  "emmet-lsp",
  # "vscode-eslint-language-server",
  "biome",
]

[[language]]
name = "svelte"
language-servers = [
  "svelteserver",
  "tailwindcss-ls",
  # "vscode-eslint-language-server"
]

[[language]]
name = "yaml"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "yaml"] }
 
# TODO: setup schemastore
# Source: https://github.com/helix-editor/helix/discussions/7066#discussioncomment-7025130
# [[language]]
# name = "yaml"
# file-types = ["yaml", "yml"]
# language-servers = ["yaml-language-server"]
# auto-format = true
# formatter = { command = "prettier", args = ["--parser", "yaml"] }
#
# [language-server.yaml-language-server.config.yaml]
# completion = true
# validation = true
# hover = true
#
# ## If I uncomment this I get errors
# # [language-server.yaml-language-server.config.yaml.schemaStore]
# # enable = true
#
# [language-server.yaml-language-server.config.yaml.schemas]
# kubernetes = [
#   "*deployment*.yaml",
#   "*service*.yaml",
#   "*configmap*.yaml",
#   "*secret*.yaml",
#   "*pod*.yaml",
#   "*namespace*.yaml",
#   "*ingress*.yaml",
# ]
# "https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/kustomization.json" = [
#   "*kustomization.yaml",
#   "*kustomize.yaml",
# ]
# "https://raw.githubusercontent.com/argoproj/argo-workflows/master/api/jsonschema/schema.json" = [
#   "*workflow*.yaml",
#   "*template*.yaml",
# ]
