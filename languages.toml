# [language-server.eslint]
# args = ["--stdio"] # should come by def with helix
# command = "vscode-eslint-language-server"

# [language-server.eslint.config]
# validate = "on" # I assume this enabled eslit to validate the file, which now shows me counts for errors, warnings, etc in helix
# experimental = { useFlatConfig = false } # not sure why this is here
# rulesCustomizations = []
# run = "onType"
# problems = { shortenToSingleLine = false }
# nodePath = "" # seems redundant, why do we need to override this, should get detected autom.

# [language-server.eslint.config.codeAction]
# [language-server.eslint.config.codeAction.disableRuleComment]
# enable = true
# location = "separateLine"

# [language-server.eslint.config.codeAction.showDocumentation]
# enable = true # why?

# [language-server.eslint.config.codeActionOnSave]
# enable = true
# mode = "fixAll"

# [language-server.eslint.config.workingDirectory]
# mode = "location" # do we need to override this?

# [language-server.typescript-language-server.config]
# documentFormatting = false # use eslint instead, do we have to override this ourselves? I think if eslint LSP is detected and enabled, this should be done automatically for us as generally everyone lets eslint take over linting+prettying, which uses prettier by default if detected by it

# To use, install prettier globally with pnpm
[[language]]
name = "html"
formatter = { command = 'prettier', args = ["--parser", "html"] }
language-servers = [ "vscode-html-language-server", "tailwindcss-ls", "emmet-lsp" ]

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }

[[language]]
name = "css"
formatter = { command = 'prettier', args = ["--parser", "css"] }
language-servers = [ "vscode-css-language-server", "tailwindcss-ls" ]

[[language]]
name = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "typescript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
formatter = { command = 'prettier', args = ["--stdin-filepath", "file.jsx"] }
auto-format = true
language-servers = [ "typescript-language-server", "tailwindcss-ls", "emmet-lsp" ]

[[language]]
name = "tsx"
scope="source.tsx"
formatter = { command = 'prettier', args = ["--stdin-filepath", "file.tsx"] }
auto-format = true
language-servers = [ "typescript-language-server", "tailwindcss-ls", "emmet-lsp" ]
# language-servers = [ "typescript-language-server", "tailwindcss-ls", "emmet-lsp", "eslint" ]

[[language]]
name = "svelte"
language-servers = [ "svelteserver", "tailwindcss-ls" ]

[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]


