[language-server]
biome = { command = "biome", args = ["lsp-proxy"] }

# NOTE: Based on experience, vtsls feels faster and more responsive for TypeScript completion.
# It avoids suggesting nearby variables, which can sometimes be irrelevant while waiting for
# completion results. In contrast, typescript-language-server is slower and often suggests
# irrelevant results before the LSP finishes fetching them.
[language-server.typescript-language-server]
command = "vtsls"
args = ["--stdio"]
config.hostInfo = "helix"

[language-server.typescript-language-server.config.typescript]
updateImportsOnFileMove = { enabled = "always" }
suggest = { completeFunctionCalls = true }

[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.vscode-eslint-language-server.config.workingDirectory]
mode = "auto"

[[language]]
name = "html"
auto-format = true
formatter = { command = 'prettier', args = ["--parser", "html"] }
language-servers = [
  "vscode-html-language-server",
  "tailwindcss-ls",
  "emmet-lsp",
]

[[language]]
name = "css"
# formatter = { command = 'prettier', args = ["--parser", "css"] }
formatter = { command = 'biome', args = [
  "format",
  "--write",
  "--stdin-file-path",
  "file.css",
] }
language-servers = ["vscode-css-language-server", "tailwindcss-ls"]

[[language]]
name = "javascript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.js",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  # "vscode-eslint-language-server",
  "biome",
]

[[language]]
name = "typescript"
# formatter = { command = 'prettier', args = ["--parser", "typescript"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.ts",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  # "vscode-eslint-language-server",
  "biome",

]

[[language]]
name = "jsx"
# formatter = { command = 'prettier', args = ["--stdin-filepath", "file.jsx"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.jsx",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  "tailwindcss-ls",
  "emmet-lsp",
  # "vscode-eslint-language-server",
  "biome",
]
block-comment-tokens = { start = "{/*", end = "*/}" }

[[language]]
name = "tsx"
# formatter = { command = 'prettier', args = ["--stdin-filepath", "file.tsx"] }
formatter = { command = 'biome', args = [
  "check",
  "--write",
  "--stdin-file-path",
  "file.tsx",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  "tailwindcss-ls",
  "emmet-lsp",
  # "vscode-eslint-language-server",
  "biome",
]
block-comment-tokens = { start = "{/*", end = "*/}" }

[[language]]
name = "svelte"
language-servers = [
  "svelteserver",
  "tailwindcss-ls",
  # "vscode-eslint-language-server"
]

[[language]]
name = "toml"
auto-format = true
formatter = { command = "taplo", args = ["fmt", "-"] }

[[language]]
name = "yaml"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "yaml"] }

[[language]]
name = "bash"
auto-format = true

[[language]]
name = "json"
# formatter = { command = 'prettier', args = ["--parser", "json"] }
formatter = { command = 'biome', args = [
  "format",
  "--write",
  "--stdin-file-path",
  "file.json",
] }
auto-format = true
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
]

# NOTE: Schemas and the formatter do not work if I override them, so I redefine
# the entire language server for JSON instead.schemas and formatter not working
# if I define it by just overriding
[language-server.vscode-json-language-server]
command = "vscode-json-language-server"
args = ["--stdio"]
config = { provideFormatter = true, json = { validate = { enable = true }, schemas = [
  # Source: https://github.com/helix-editor/helix/discussions/8823#discussioncomment-8093075
  { fileMatch = [
    "tsconfig.json",
    "tsconfig.*.json",
  ], url = "https://json.schemastore.org/tsconfig.json" },

  { fileMatch = [
    "package.json",
  ], url = "https://json.schemastore.org/package.json" },
] } }


# TODO: setup schemastore. UPDATE: this might not be needed since schemas for github workflow works out of the box
# Source: https://github.com/helix-editor/helix/discussions/7066#discussioncomment-7025130
# [[language]]
# name = "yaml"
# file-types = ["yaml", "yml"]
# language-servers = ["yaml-language-server"]
# auto-format = true
# formatter = { command = "prettier", args = ["--parser", "yaml"] }
#
# [language-server.yaml-language-server.config.yaml]
# completion = true
# validation = true
# hover = true
#
# ## If I uncomment this I get errors
# # [language-server.yaml-language-server.config.yaml.schemaStore]
# # enable = true
#
# [language-server.yaml-language-server.config.yaml.schemas]
# kubernetes = [
#   "*deployment*.yaml",
#   "*service*.yaml",
#   "*configmap*.yaml",
#   "*secret*.yaml",
#   "*pod*.yaml",
#   "*namespace*.yaml",
#   "*ingress*.yaml",
# ]
# "https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/kustomization.json" = [
#   "*kustomization.yaml",
#   "*kustomize.yaml",
# ]
# "https://raw.githubusercontent.com/argoproj/argo-workflows/master/api/jsonschema/schema.json" = [
#   "*workflow*.yaml",
#   "*template*.yaml",
# ]
