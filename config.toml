theme = "custom-tokyonight-storm"

[editor]
line-number = "relative"
mouse = false
bufferline = "always"
end-of-line-diagnostics = "hint"
completion-timeout = 5
completion-trigger-len = 1
default-yank-register = "+"       # use system clipboard for yank and paste actions
clipboard-provider = "pasteboard"
# preview-completion-insert = false

[editor.file-picker]
hidden = false

[editor.inline-diagnostics]
cursor-line = "error"

[editor.lsp]
display-messages = true
# display-progress-messages = true

[editor.cursor-shape]
insert = "bar"

[editor.statusline]
left = [
  "mode",
  "version-control",
  "spinner",
  "file-name",
  "file-modification-indicator",
  "read-only-indicator",
  "file-type",
]

[editor.indent-guides]
render = true
character = "▏" # Some characters that work well: "▏", "┆", "┊", "⸽"

# [editor.whitespace.render]
# newline = "all"

# The keymap should be somewhat similar to neovim, especially for navigation.
# However, the core idea remains: select first, then perform an action.

# Normal Mode Keymaps
[keys.normal]
esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]
J = "@10j"
K = "@10k"
G = "goto_last_line"
H = "goto_first_nonwhitespace"
L = "goto_line_end"
V = ["select_mode", "select_line_below"]
# x = ["extend_line_below", "select_mode"]
"C-r" = "redo"
D = ["select_mode", "goto_line_end", "delete_selection"]
# "%" = ["select_mode", "select_all"]
g = { h = "hover" }
"A-o" = ["select_mode", "expand_selection"]
"ret" = "goto_word"
# a = ["collapse_selection", "append_mode"]
# i = ["collapse_selection", "insert_mode"]

# Remove selection in horizontal line navigations due to issue with append and insert keymap. Going at the start/end of selection instead of relative to the cursor.
# w = ["move_next_word_start", "collapse_selection"]
# W = ["move_next_long_word_start", "collapse_selection"]
# e = ["move_next_word_end", "collapse_selection"]
# E = ["move_next_long_word_end", "collapse_selection"]
# b = ["move_prev_word_start", "collapse_selection"]
# B = ["move_prev_long_word_start", "collapse_selection"]

[keys.normal.space]
# Open yazi in new tmux-window
e = [":sh tmux new-window -n fx ~/.config/helix/s/picker.sh '%{buffer_name}'"]
E = "file_explorer_in_current_buffer_directory"

# Open file picker with preview off.
f = "@<space>+f<C-t>"
w = ":update"
J = "jumplist_picker"
j = "goto_previous_buffer"
k = "goto_next_buffer"
o = "file_picker_in_current_buffer_directory"
z = "suspend"

# utilities
u = { t = [ # Trim whitespaces at the end of each line in current buffer
  "save_selection",
  "select_all",
  # Delete trailing whitespace from end of each line
  ":pipe sed 's/[ \t]*$//'",
  # Delete trailing blank lines (including whitespace) from end of the buffer
  ":pipe awk '/^\\s*$/ {b=b $0 \"\\n\"; next;} {printf \"%s\",b; b=\"\"; print;}'",
  "collapse_selection",
  "goto_last_line",
  "add_newline_below",
  "commit_undo_checkpoint",
  ":write",
], r = ":reload-all" }

# for macros
"+" = { f = "file_picker" }


[keys.normal.space.g]
g = ":sh tmux new-window -n lg 'lazygit'"

# Show git history of current buffer.
f = [
  ":noop %sh{git -c color.ui=always log --follow -p '%{buffer_name}' | delta > /tmp/hx-git-file.log}",
  ":sh tmux new-window -n git-file-history 'less -R /tmp/hx-git-file.log; rm -f /tmp/hx-git-file.log'",
]
c = "changed_file_picker"
# Show blame info for current line.
b = ":echo %sh{git blame -L %{cursor_line},+1 '%{buffer_name}'}"
# Show git history of current line.
l = [
  ":noop %sh{git -c color.ui=always log -L %{cursor_line},%{cursor_line}:'%{buffer_name}' | delta > /tmp/hx-git-line.log}",
  ":sh tmux new-window -n git-line-history 'less -R /tmp/hx-git-line.log; rm -f /tmp/hx-git-line.log'",
]
# l = [
#   ':noop %sh{git blame --date=short "%{buffer_name}" > /tmp/blamecontents}',
#   ':noop %sh{echo "%{cursor_line}" > /tmp/blameline}',
#   ':o /tmp/blamecontents',
#   ':goto %sh{cat /tmp/blameline}',
# ]
# l = ":echo %sh{git blame --date=short -L %{cursor_line},+1 %{buffer_name} | sed -E 's/[0-9]+).*//' | sed 's/(//g'}"
# l = ":sh git blame -L %{cursor_line},%{cursor_line} %{buffer_name}"
# Copy git provider url for this file and line
# o = ":sh get_git_url %{buffer_name} %{cursor_column} | pbcopy"
# b = ":sh gh browse %{buffer_name}:%{cursor_line} -c=%sh{latest_pushed_commit}"

[keys.normal.m]
# Workaround for us to be able to replace highlighted/selected text with P keymap.
i = ["select_mode", "select_textobject_inner"]
a = ["select_mode", "select_textobject_around"]
# i = { b = "@mi(", B = "@mi{" }
# a = { b = "@ma(", B = "@ma{" }

[keys.normal.m.v]
i = { b = "@mi(", B = "@mi{" }
a = { b = "@ma(", B = "@ma{" }

[keys.normal.space.q]
q = ":quit"
c = ":buffer-close"
C = ":buffer-close-others"

[keys.insert]
j = { k = "normal_mode", j = "normal_mode" }
k = { j = "normal_mode", k = "normal_mode" }
"C-space" = "completion"
"C-v" = "paste_before"

# Select Mode Keymaps
[keys.select]
esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]
J = "@10j"
K = "@10k"
G = "goto_last_line"
P = "replace_with_yanked"
V = ["select_mode", "select_line_below"]
H = "goto_line_start"
L = "goto_line_end"
"C-n" = "search_selection"
# a = ["collapse_selection", "append_mode"]
# i = ["collapse_selection", "insert_mode"]

# [keys.normal.space.g]
# NOTE: this is problematic. A lot of issues occur when using this. You no longer can't use <c-o> in lazygit even used outside of helix.
# g = [":new", ":insert-output lazygit", ":buffer-close!", ":redraw", ":reload-all"]
# you need to set allow_remote_control to yes in order to use kitty @ launch


# NOTE: create new file relative to current buffer path
# Ref: https://github.com/helix-editor/helix/discussions/6052
# :o <C-r>%


# NOTE: move/rename current buffer
# Ref: https://github.com/helix-editor/helix/issues/6825#issuecomment-2499152942
# :move <C-r>%

# NOTE:
# Ref: https://github.com/helix-editor/helix/discussions/12174#discussioncomment-11437600
# You can also use <C-w> to remove the last segment when using <C-r>% command expansion


# NOTE:
# Ref: https://www.reddit.com/r/HelixEditor/comments/14v300b/how_to_select_within_tags/
# To select within html tags, move cursor above inside of html tags then use <Alt-o>
