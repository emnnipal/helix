theme = "custom-tokyonight-storm"

[editor]
line-number = "relative"
mouse = false
bufferline = "always"
end-of-line-diagnostics = "hint"
completion-timeout = 1000
completion-trigger-len = 1
default-yank-register = "+"       # use system clipboard for yank and paste actions
clipboard-provider = "pasteboard"
preview-completion-insert = true

[editor.file-picker]
hidden = false

[editor.inline-diagnostics]
# cursor-line = "error" # NOTE: just toggle instead with "<space>ud". Removing this config makes it disabled by default.

[editor.lsp]
display-messages = true
# display-progress-messages = true

[editor.smart-tab]
enable = false

[editor.cursor-shape]
insert = "bar"
select = 'underline'

[editor.statusline]
left = [
  "mode",
  # "version-control",
  "spinner",
  "file-name",
  "file-modification-indicator",
  "read-only-indicator",
  # "file-type",
]

[editor.indent-guides]
render = true
character = "▏" # Some characters that work well: "▏", "┆", "┊", "⸽"

# [editor.whitespace.render]
# newline = "all"

# Normal Mode Keymaps
[keys.normal]
esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]
J = "@10j"
K = "@10k"
G = "goto_last_line"
H = "goto_first_nonwhitespace"
L = "goto_line_end"
V = ["select_mode", "extend_to_line_bounds"]
x = ["select_mode", "select_line_below"]
X = ["select_mode", "select_line_above"]
"C-r" = "redo"
D = ["select_mode", "goto_line_end", "delete_selection"]
"%" = ["select_mode", "select_all"]
g = { h = "hover", l = ":toggle-option inline-diagnostics.cursor-line disable error" }
"A-o" = ["select_mode", "expand_selection"]
"ret" = "goto_word"
"C-n" = "search_selection"
# a = ["collapse_selection", "append_mode"]
# i = ["collapse_selection", "insert_mode"]
# TODO: try once yazi releases version 25.3.7
C-y = [
  ':sh rm -f /tmp/unique-file',
  ':insert-output yazi %{buffer_name} --chooser-file=/tmp/unique-file',
  ':open %sh{cat /tmp/unique-file}',
  ':redraw',
]

[keys.normal.space]
# Open yazi in new tmux-window
e = [":sh tmux new-window -n fx ~/.config/helix/s/picker.sh '%{buffer_name}'"]
E = "file_explorer_in_current_buffer_directory"

# Open file picker with preview off.
f = "@<space>+f<C-t>"

# Save file. Write changes if the file has been modified.
w = ":update"

# Save file wihtout formatting # TODO: use :write --no-format when implemented
W = ':toggle-option auto-format'

J = "jumplist_picker"
j = "goto_previous_buffer"
k = "goto_next_buffer"
o = "file_picker_in_current_buffer_directory"
R = "last_picker"
z = "suspend"

# for macros
"+" = { f = "file_picker" }

# utilities
[keys.normal.space.u]
t = [ # Trim whitespaces at the end of each line in current buffer
  "save_selection",
  "select_all",
  # Delete trailing whitespace from end of each line
  ":pipe sed 's/[ \t]*$//'",
  # Delete trailing blank lines (including whitespace) from end of the buffer
  ":pipe awk '/^\\s*$/ {b=b $0 \"\\n\"; next;} {printf \"%s\",b; b=\"\"; print;}'",
  "collapse_selection",
  "goto_last_line",
  "add_newline_below",
  "commit_undo_checkpoint",
  ":write",
]
r = ":reload-all"
d = ":toggle-option end-of-line-diagnostics disable hint"
# R = ":sh tmux popup -xC -yC -w90%% -h90%% -E scooter"
R = ":sh ~/.config/helix/s/scooter.sh"


[keys.normal.space.g]
g = [
  ":sh tmux_window=\"lg-$(basename $(pwd))\"; tmux list-windows | grep -q \"$tmux_window\" && tmux select-window -t \"$tmux_window\" || tmux new-window -n \"$tmux_window\" 'lazygit'",
]

# Show git history of current buffer.
f = [
  ":sh tmux new-window -n git-file-history git -c color.ui=always log --follow -p '%{buffer_name}' | delta",
]
# f = [":sh tmux new-window -n git-file-history 'lazygit -f %{buffer_name}'"]
c = "changed_file_picker"
# Show blame info for current line.
b = [":echo %sh{git blame -L %{cursor_line},+1 '%{buffer_name}'}"]
# Show git history of current line.
l = [
  ":sh tmux new-window -n git-line-history git -c color.ui=always log -L %{cursor_line},%{cursor_line}:'%{buffer_name}' | delta",

]

[keys.normal.m]
# Workaround for us to be able to replace highlighted/selected text with P keymap.
i = ["select_mode", "select_textobject_inner"]
a = ["select_mode", "select_textobject_around"]

[keys.normal.m.v]
i = { b = "@mi(", B = "@mi{" }
a = { b = "@ma(", B = "@ma{" }

[keys.normal.space.q]
# Save current buffer to session then quit helix.
q = [":sh ~/.config/helix/s/session.sh add '%{buffer_name}'", ":quit"]
c = ":buffer-close"
C = ":buffer-close-others"

[keys.normal.space.q.s]
a = ":sh ~/.config/helix/s/session.sh add '%{buffer_name}'"
r = ":sh ~/.config/helix/s/session.sh restore"
c = ":sh ~/.config/helix/s/session.sh clear"
l = ":sh ~/.config/helix/s/session.sh list"
x = ":sh ~/.config/helix/s/session.sh remove '%{buffer_name}'"

[keys.insert]
j = { k = "normal_mode", j = "normal_mode" }
k = { j = "normal_mode", k = "normal_mode" }
"C-space" = "completion"
"C-v" = "paste_before"


# NOTE: I get what select means now. It's literally just to extend. This is
# different from visual in neovim. Select is for just extending selections.
# Useful in multicursors to keep current selections without unselecting.▐

# Select Mode Keymaps
[keys.select]
esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]
J = "@10j"
K = "@10k"
G = "goto_last_line"
P = "replace_with_yanked"
V = "extend_to_line_bounds"
x = "select_line_below"
X = "select_line_above"
H = "goto_line_start"
L = "goto_line_end"
"C-n" = "search_selection"
# a = ["collapse_selection", "append_mode"]
# i = ["collapse_selection", "insert_mode"]

# [keys.normal.space.g]
# NOTE: this is problematic. A lot of issues occur when using this. You no longer can't use <c-o> in lazygit even used outside of helix.
# g = [":new", ":insert-output lazygit", ":buffer-close!", ":redraw", ":reload-all"]
# you need to set allow_remote_control to yes in order to use kitty @ launch


# NOTE: create new file relative to current buffer path
# Ref: https://github.com/helix-editor/helix/discussions/6052
# :o <C-r>%


# NOTE: move/rename current buffer
# Ref: https://github.com/helix-editor/helix/issues/6825#issuecomment-2499152942
# :move <C-r>%

# NOTE:
# Ref: https://github.com/helix-editor/helix/discussions/12174#discussioncomment-11437600
# You can also use <C-w> to remove the last segment when using <C-r>% command expansion


# NOTE:
# Ref: https://www.reddit.com/r/HelixEditor/comments/14v300b/how_to_select_within_tags/
# To select within html tags, move cursor above inside of html tags then use <Alt-o>
